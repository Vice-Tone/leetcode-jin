package editor.cn;

//Áªô‰Ω†‰∏§‰∏™ ÈùûÁ©∫ ÈìæË°®Êù•‰ª£Ë°®‰∏§‰∏™ÈùûË¥üÊï¥Êï∞„ÄÇÊï∞Â≠óÊúÄÈ´ò‰Ωç‰Ωç‰∫éÈìæË°®ÂºÄÂßã‰ΩçÁΩÆ„ÄÇÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™Â≠òÂÇ®‰∏Ä‰ΩçÊï∞Â≠ó„ÄÇÂ∞ÜËøô‰∏§Êï∞Áõ∏Âä†‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®„ÄÇ 
//
// ‰Ω†ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞Â≠óÈÉΩ‰∏ç‰ºö‰ª•Èõ∂ÂºÄÂ§¥„ÄÇ 
//
// 
//
// ËøõÈò∂Ôºö 
//
// Â¶ÇÊûúËæìÂÖ•ÈìæË°®‰∏çËÉΩ‰øÆÊîπËØ•Â¶Ç‰ΩïÂ§ÑÁêÜÔºüÊç¢Âè•ËØùËØ¥Ôºå‰Ω†‰∏çËÉΩÂØπÂàóË°®‰∏≠ÁöÑËäÇÁÇπËøõË°åÁøªËΩ¨„ÄÇ 
//
// 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 8 -> 0 -> 7
// 
// Related Topics ÈìæË°® 
// üëç 392 üëé 0

import java.util.Deque;
import java.util.LinkedList;

class ‰∏§Êï∞Áõ∏Âä†II {
    public static void main(String[] args) {

    }

    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    public class ListNode {
        int val;
        ListNode next;

        ListNode() {
        }

        ListNode(int val) {
            this.val = val;
        }

        ListNode(int val, ListNode next) {
            this.val = val;
            this.next = next;
        }
    }

    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            if (l1 == null) {
                return l2;
            }
            if (l2 == null) {
                return l1;
            }
            Deque<Integer> stack1 = new LinkedList<>();
            Deque<Integer> stack2 = new LinkedList<>();
            //ËÆ°ÁÆól1ÁöÑÈïøÂ∫¶
            int length1 = 0;
            ListNode p = l1;
            while (p != null) {
                length1++;
                p = p.next;
            }
            //ËÆ°ÁÆól2ÁöÑÈïøÂ∫¶
            int length2 = 0;
            p = l2;
            while (p != null) {
                length2++;
                p = p.next;
            }
            //Ê∑ªÂä†0
            if (length1 < length2) {
                int diff = length2 - length1;
                while (diff > 0) {
                    stack1.push(0);
                    diff--;
                }
            }
            if (length1 > length2) {
                int diff = length1 - length2;
                while (diff > 0) {
                    stack2.push(0);
                    diff--;
                }
            }

            p = l1;
            while (p != null) {
                stack1.push(p.val);
                p = p.next;
            }
            p = l2;
            while (p != null) {
                stack2.push(p.val);
                p = p.next;
            }
            ListNode res = new ListNode();
            int jinwei = 0;
            while (!stack1.isEmpty() && !stack2.isEmpty()) {
                int val = stack1.pop() + stack2.pop() + jinwei;
                int nodeVal = val % 10;
                jinwei = val / 10;
                ListNode node = new ListNode(nodeVal);
                //ÈááÁî®Â§¥ÊèíÊ≥ï
                node.next = res.next;
                res.next = node;
            }
            if (jinwei != 0) {
                ListNode node = new ListNode(jinwei);
                node.next = res.next;
                res.next = node;
            }
            return res.next;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}